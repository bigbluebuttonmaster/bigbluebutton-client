<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
         xmlns:mate="http://mate.asfusion.com/"
         creationComplete="onCreationComplete()">
    
  <mx:Script>
    <![CDATA[
      import com.asfusion.mate.events.Dispatcher;
      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.core.EventConstants;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.events.CoreEvent;
      import org.bigbluebutton.core.events.VoiceConfEvent;
      import org.bigbluebutton.main.model.users.BBBUser;
      import org.bigbluebutton.main.model.users.events.KickUserEvent;
      import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
      import org.bigbluebutton.modules.chat.model.ChatOptions;
      import org.bigbluebutton.modules.videoconf.model.VideoConfOptions;
      import org.bigbluebutton.util.i18n.ResourceUtil;
      
      public var sharerUserID:String;
      [Bindable]
      private var BUTTONS_SIZE:int = 31;
      private var BUTTONS_PADDING:int = 10;
           
      [Bindable]
      private var showButton:Boolean;
      
      private function onCreationComplete():void {
        showControlButtons();
        showPrivateChatButton();
      }
      
      public function get padding():int {
        return BUTTONS_PADDING;
      }
      
      public function userMuted(muted:Boolean):void {
        if (muted) {
          muteUnmuteBtn.styleName = "videoMutedButtonStyle";
        } else {
          muteUnmuteBtn.styleName = "videoUnmutedButtonStyle";
        }
      }
      
      public function updateControlButtons():void {
        showControlButtons();
      }
      
      private function onKickUserClicked():void {
        var gd:Dispatcher = new Dispatcher();
        gd.dispatchEvent(new KickUserEvent(sharerUserID)); 
      }
      
      private function onPrivateChatClicked():void {
        var e:CoreEvent = new CoreEvent(EventConstants.START_PRIVATE_CHAT);
        e.message.chatWith = sharerUserID;
        var gd:Dispatcher = new Dispatcher();
        gd.dispatchEvent(e);
      }
      
      private function onSwitchPresenterClicked():void {
        var e:RoleChangeEvent = new RoleChangeEvent(RoleChangeEvent.ASSIGN_PRESENTER);
        e.userid = sharerUserID;
        e.username = UsersUtil.getUserName(sharerUserID);
        var gd:Dispatcher = new Dispatcher();
        gd.dispatchEvent(e);     
      }
      
      private function onMuteUnmuteClicked():void {
        var bu:BBBUser = UsersUtil.getUser(sharerUserID);
        if (bu != null) {
          var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);        
          e.userid = bu.voiceUserid;
          e.mute = ! bu.voiceMuted; 
          var gd:Dispatcher = new Dispatcher();
          gd.dispatchEvent(e);          
        }
      }
      
		private function showControlButtons():void {
			var vidOptions:VideoConfOptions = new VideoConfOptions();
			
      displaySwitchPresenterButton(vidOptions.controlsForPresenter);
      displayMuteButton(vidOptions.controlsForPresenter);
      displayEjectButton(vidOptions.controlsForPresenter);
		}
      
    private function displayEjectButton(controlsForPresenter:Boolean):void {
      /**
       * Display button if:
       * 1. If I am moderator and this window is not me.
       * 2. If I am the presenter and display controls for presenter and this window is not me.
       */
      if (ejectUserBtn != null) {
        if (UsersUtil.amIModerator() && ! UsersUtil.isMe(sharerUserID)) {
          ejectUserBtn.visible = true;
          ejectUserBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.ejectUserBtn.toolTip', [UsersUtil.getUserName(sharerUserID)]); 
          return;
        }
        
        if (controlsForPresenter && UsersUtil.amIPresenter() && ! UsersUtil.isMe(sharerUserID)) { /** 2 **/
          ejectUserBtn.visible = true;
          ejectUserBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.ejectUserBtn.toolTip', [UsersUtil.getUserName(sharerUserID)]); 
          return;
        }
        
        ejectUserBtn.visible = false;
      }
    }
    
    private function displaySwitchPresenterButton(controlsForPresenter:Boolean):void {
      /**
      * Display button if:
      * 1. If I am moderator and this window is not me and I am NOT the presenter.
      * 2. If I am the presenter and display controls for presenter and this window is not me.
      */
      if (switchPresenter != null) {
        if (UsersUtil.amIModerator() && ! UsersUtil.amIPresenter() && ! UsersUtil.isMe(sharerUserID)) { /** 1. **/ 
            switchPresenter.visible = true;
            switchPresenter.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.switchPresenter.toolTip', [UsersUtil.getUserName(sharerUserID)]);
            return;
        } 
        
        if (controlsForPresenter && UsersUtil.amIPresenter() && ! UsersUtil.isMe(sharerUserID)) { /** 2 **/
          switchPresenter.visible = true;
          switchPresenter.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.switchPresenter.toolTip', [UsersUtil.getUserName(sharerUserID)]);  
          return;
        }
        
        switchPresenter.visible = false;
      }
    }

    private function displayMuteButton(controlsForPresenter:Boolean):void {
      /**
      * Display button if user is joined to voice and:
      * 1. if I am moderator OR
      * 2. if display controls for presenter and I am presenter OR
      * 3. if this window is me
      */
      if (muteUnmuteBtn != null) {
        if (UsersUtil.isUserJoinedToVoice(sharerUserID)) {
          if (UsersUtil.amIModerator() || (controlsForPresenter && UsersUtil.amIPresenter()) || UsersUtil.isMe(sharerUserID)) {
            muteUnmuteBtn.visible = true;
            muteUnmuteBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.muteButton.toolTip', [UsersUtil.getUserName(sharerUserID)]);
            return;
          }                      
        }
        muteUnmuteBtn.visible = false;
      }
    }
      
      private function showPrivateChatButton():void {
        var chatOptions:ChatOptions = new ChatOptions();
        if (chatOptions.privateEnabled && ! UsersUtil.isMe(sharerUserID)) {
          privateChatBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.privateChatBtn.toolTip', [UsersUtil.getUserName(sharerUserID)]);
          privateChatBtn.visible = true;
        } else {
          privateChatBtn.visible = false;
        }
      }
    ]]>
  </mx:Script>
  <mx:Button id="muteUnmuteBtn" visible="false" click="onMuteUnmuteClicked()"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoUnmutedButtonStyle"/>
  <mx:Spacer width="2"/>
  <mx:Button id="switchPresenter" visible="false" click="onSwitchPresenterClicked()"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoSwitchPresenterButtonStyle"/>
  <mx:Spacer width="2"/>
  <mx:Button id="ejectUserBtn" visible="false" click="onKickUserClicked()"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoEjectUserButtonStyle"/>
  <mx:Spacer width="2"/>
  <mx:Button id="privateChatBtn" click="onPrivateChatClicked()"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoPrivateChatButtonStyle"/>
</mx:HBox>
