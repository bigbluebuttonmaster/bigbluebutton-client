<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/" >
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
      import org.bigbluebutton.main.model.users.events.KickUserEvent;
			import org.bigbluebutton.modules.users.business.UsersProxy;
			import org.bigbluebutton.core.events.VoiceConfEvent;
			import org.bigbluebutton.modules.users.events.StartUsersModuleEvent;
			import org.bigbluebutton.modules.users.events.StopUsersModuleEvent;
			import org.bigbluebutton.modules.users.managers.UsersManager;
		]]>
	</mx:Script>
	
	
	<EventHandlers type="{FlexEvent.PREINITIALIZE}" >
		<ObjectBuilder cache="global" generator="{UsersProxy}" />
		<ObjectBuilder cache="global" generator="{UsersManager}" /> 
	</EventHandlers>
	
	<EventHandlers type="{StartUsersModuleEvent.START_USERS_MODULE}" >
		<MethodInvoker generator="{UsersManager}" method="moduleStarted" arguments="{event}" />
		<MethodInvoker generator="{UsersProxy}" method="connect" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{StopUsersModuleEvent.STOP_USERS_MODULE}" >
		<MethodInvoker generator="{UsersProxy}" method="disconnect" />
		<MethodInvoker generator="{UsersManager}" method="moduleEnded" />
	</EventHandlers>

  <EventHandlers type="{KickUserEvent.KICK_USER}" >
    <MethodInvoker generator="{UsersProxy}" method="kickUser" arguments="{event}" />
  </EventHandlers>

  
	<EventHandlers type="{VoiceConfEvent.EJECT_USER}" >
		<MethodInvoker generator="{UsersProxy}" method="ejectUser" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{VoiceConfEvent.MUTE_USER}" >
		<MethodInvoker generator="{UsersProxy}" method="muteUnmuteUser" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{VoiceConfEvent.MUTE_ALL}" >
		<MethodInvoker generator="{UsersProxy}" method="muteAllUsers" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{VoiceConfEvent.UNMUTE_ALL}" >
		<MethodInvoker generator="{UsersProxy}" method="unmuteAllUsers" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{VoiceConfEvent.MUTE_ALMOST_ALL}" >
		<MethodInvoker generator="{UsersProxy}" method="muteAlmostAllUsers" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{VoiceConfEvent.LOCK_MUTE_USER}" >
		<MethodInvoker generator="{UsersProxy}" method="lockMuteUser" arguments="{event}" />
	</EventHandlers>
	
</EventMap>
