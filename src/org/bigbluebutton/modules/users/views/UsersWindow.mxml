<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mdi:MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mdi="flexlib.mdi.containers.*" 
	xmlns:flc="flexlib.controls.*"
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	xmlns:mate="http://mate.asfusion.com/"
	creationComplete="onCreationComplete()"
	title="{ResourceUtil.getInstance().getString('bbb.users.title')}"
	showCloseButton="false">

	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	<mate:Listener type="{ShortcutEvent.RAISE_HAND}" method="remoteRaiseHand" />
	<mate:Listener type="{ShortcutEvent.FOCUS_USERS_WINDOW}" method="focusWindow" />
	<mate:Listener type="{UsersEvent.ROOM_MUTE_STATE}" method="setRoomMute" />
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.system.Security;
			import flash.system.SecurityPanel;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.events.DataGridEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.Role;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.model.users.BBBUser;
			import org.bigbluebutton.main.model.users.Conference;
			import org.bigbluebutton.main.model.users.events.KickUserEvent;
			import org.bigbluebutton.main.model.users.events.LowerHandEvent;
			import org.bigbluebutton.main.model.users.events.RaiseHandEvent;
			import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.users.events.UsersRollEvent;
			import org.bigbluebutton.core.events.VoiceConfEvent;
			import org.bigbluebutton.modules.users.events.UsersEvent;
			import org.bigbluebutton.modules.users.model.UsersOptions;
			import org.bigbluebutton.util.i18n.ResourceUtil;		
			
			private var dispatcher:Dispatcher;
			
			private var keyCombos:Object;
			private var modifier:String;
			
			private var roomMuted:Boolean = false;
			private var myMenu:Menu;
			
			[Bindable]
			public var partOptions:UsersOptions;
			
			[Bindable]
			private var images:Images = new Images();
			
			[Bindable]
			private var users:ArrayCollection = new ArrayCollection();
			
			private var handRaised:Boolean = false;
			private var amIModerator:Boolean = false;
			
			private const FOCUS_USERS_LIST:String = "Focus Users List";
			private const MAKE_PRESENTER:String = "Make Presenter";
			private const KICK_USER:String = "Kick User";
			private const MUTE_USER:String = "Mute User";
			private const MUTE_ALL_USER:String = "Mute All User";
			
			private var muteMeRolled:Boolean = false;
			
			private function onCreationComplete():void {
				dispatcher = new Dispatcher();
			
				users = UserManager.getInstance().getConference().users;
				amIModerator = UserManager.getInstance().getConference().amIModerator();
				
				settingsBtn.visible = settingsBtn.includeInLayout = amIModerator;
				
				BindingUtils.bindSetter(changeButtons, UserManager.getInstance().getConference(), "amIPresenter");
				BindingUtils.bindSetter(updateNumberofUsers, users, "length");
				
				this.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
				
				modifier = ExternalInterface.call("determineModifier");
				loadKeyCombos(modifier);
				
				changeButtons(UserManager.getInstance().getConference().amIPresenter);
				
				resourcesChanged();
				
				titleBarOverlay.tabIndex = partOptions.baseTabIndex;
				minimizeBtn.tabIndex = partOptions.baseTabIndex+1;
				maximizeRestoreBtn.tabIndex = partOptions.baseTabIndex+2;
				closeBtn.tabIndex = partOptions.baseTabIndex+3;
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.TOP_LEFT;
			}
			
			
			private function updateNumberofUsers(numUsers:int):void {
				if (numUsers > 8)
					this.title = ResourceUtil.getInstance().getString('bbb.users.title', [":", numUsers]);
				else 
					this.title = ResourceUtil.getInstance().getString('bbb.users.title', ["", ""]);
			}
			
			private function localeChanged(e:Event):void {
				updateNumberofUsers(users.length);
				resourcesChanged();
			}
			
			private function changeButtons(presenter:Boolean):void {
				raiseHandBtn.visible = !(presenter || amIModerator);
			}
			
			private function onItemRollOver(event:ListEvent):void{
				var item:IListItemRenderer = event.itemRenderer;
				var user:BBBUser = item.data as BBBUser;
				var rollEvent:UsersRollEvent = new UsersRollEvent(UsersRollEvent.USER_ROLL_OVER, user.userID);
				dispatcher.dispatchEvent(rollEvent);
			}
			
			private function onItemRollOut(event:ListEvent):void{
				var item:IListItemRenderer = event.itemRenderer;
				var user:BBBUser = item.data as BBBUser;
				var rollEvent:UsersRollEvent = new UsersRollEvent(UsersRollEvent.USER_ROLL_OUT, user.userID);
				dispatcher.dispatchEvent(rollEvent);
			}
			
			private function raiseHand():void{
				if (UserManager.getInstance().getConference().getMyRole() == Role.VIEWER) {
					handRaised = !handRaised;
					var e:RaiseHandEvent = new RaiseHandEvent(RaiseHandEvent.RAISE_HAND);
					e.raised = handRaised;
					dispatchEvent(e);
				}
			}
			
			private function openSettings():void {
				// everyone can see the audio settings
				var myMenuData:Array = [];
				
				myMenuData[0] = {label: ResourceUtil.getInstance().getString('bbb.users.settings.lowerAllHands'), icon: images.hand_new};
				if (!roomMuted) {
					myMenuData[1] = {label: ResourceUtil.getInstance().getString('bbb.users.settings.muteAll'), icon: images.audio_muted};
					if (UserManager.getInstance().getConference().getPresenter())
						myMenuData[2] = {label: ResourceUtil.getInstance().getString('bbb.users.settings.muteAllExcept') + ": " + UserManager.getInstance().getConference().getPresenter().name, icon: images.audio_muted};
				} else
					myMenuData[1] = {label: ResourceUtil.getInstance().getString('bbb.users.settings.unmuteAll'), icon: images.audio};
				
				// make sure the previous menu is closed before opening a new one
				// This could be improved to include a flag that tells if the menu is open,
				// but it would require an extra listener for the MenuCloseEvent.
				if (myMenu) myMenu.hide();
				
				myMenu = Menu.createMenu(null, myMenuData, true);
				
				myMenu.variableRowHeight = true;
				myMenu.show(this.x + settingsBtn.x + 2, this.y + this.height + 25);
				myMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClickHandler);
				myMenu.setFocus();
			}
			
			private function menuClickHandler(e:MenuEvent):void {
				// case 1 is the separator and can never get called
				switch (e.index) {
				case 0:
					lowerHands();
					break;
				case 1:
					muteAll();
					break;
				case 2:
					muteAlmostAll();
				}
			}
			
			private function setRoomMute(e:UsersEvent):void {
				roomMuted = e.mute_state;
			}
			
			private function muteAll():void {
				if (amIModerator) {
					if (!roomMuted) {
						var muteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_ALL);
						dispatchEvent(muteCommand);
						roomMuted = true;
					} else {
						var unmuteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.UNMUTE_ALL);
						dispatchEvent(unmuteCommand);
						roomMuted = false;
					}
				}
			}
			
			private function muteAlmostAll():void {
				if (amIModerator) {
					if (!roomMuted) {
						var muteCommand:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_ALMOST_ALL);
						dispatchEvent(muteCommand);
						roomMuted = true;
					}
				}
			}
			
			private function lowerHands():void {
				for (var i:int = 0; i < users.length; i++) {
					var p:BBBUser = users.getItemAt(i) as BBBUser;
					if (p.raiseHand) dispatchEvent(new LowerHandEvent(p.userID));
        		}
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();				
				if (users.length > 8)
					this.title = ResourceUtil.getInstance().getString('bbb.users.title', [":", users.length]);
				else 
					this.title = ResourceUtil.getInstance().getString('bbb.users.title', ["", ""]);
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.titleBar');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.users.minimizeBtn.accessibilityName");
					
					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.users.maximizeRestoreBtn.accessibilityName");
				}
			}
			
			private function loadKeyCombos(modifier:String):void {
				keyCombos = new Object(); // always start with a fresh array bbb.shortcutkey.users.muteall
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.users.focusUsers') as String)] = FOCUS_USERS_LIST;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.users.makePresenter') as String)] = MAKE_PRESENTER;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.users.kick') as String)] = KICK_USER;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.users.mute') as String)] = MUTE_USER;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.users.muteall') as String)] = MUTE_ALL_USER;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.maximize') as String)] = ShortcutEvent.MAXIMIZE_USERS;
				keyCombos[modifier+(ResourceUtil.getInstance().getString('bbb.shortcutkey.general.minimize') as String)] = ShortcutEvent.MINIMIZE_USERS;
			}
			
			// Handle general-access hotkeys, regardless of what window the user is focused in
			private function handleKeyDown(e:KeyboardEvent):void {
				if (keyCombos == null) loadKeyCombos(modifier);
				var keyPress:String = (e.ctrlKey  ? "control+" : "") + (e.shiftKey ? "shift+"   : "") +
					(e.altKey   ? "alt+"     : "") + e.keyCode;		                              
				if (keyCombos[keyPress]) {
					switch(keyCombos[keyPress]) {
						case FOCUS_USERS_LIST:
							remoteFocusUsers();
							break;
						case MAKE_PRESENTER:
							remoteMakePresenter();
							break;
						case KICK_USER:
							remoteKickUser();
							break;
						case MUTE_USER:
							remoteMuteUser();
							break;
						case MUTE_ALL_USER:
							muteAll();
							break;
						case ShortcutEvent.MAXIMIZE_USERS:
							remoteMaximize();
							break;
						case ShortcutEvent.MINIMIZE_USERS:
							remoteMinimize();
							break;
					}
				}
			}
			
			private function focusWindow(e:ShortcutEvent):void{
				focusManager.setFocus(titleBarOverlay);
			}
			
			public function remoteRaiseHand(e:ShortcutEvent):void{
				raiseHand();
			}
			
			private function remoteMinimize():void{
				if (!minimized){
					this.minimize();
				}
			}
			
			private function remoteMaximize():void{
				if (!maximized && !minimized){
					this.maximize();
				} else{
					this.restore();
				}				
			}
			
			public function remoteMakePresenter():void{
				if (amIModerator && usersGrid.selectedIndex != -1) {
					var selData:Object = usersGrid.selectedItem;
					
					if (!selData.presenter && !selData.phoneUser) {
						var e:RoleChangeEvent = new RoleChangeEvent(RoleChangeEvent.ASSIGN_PRESENTER);
						e.userid = selData.userID;
						e.username = selData.name;
						dispatchEvent(e);
					}
				}
			}
			
			public function remoteKickUser():void{
				if (amIModerator && usersGrid.selectedIndex != -1 && partOptions.allowKickUser) {
					var selData:Object = usersGrid.selectedItem;
					
					if (!selData.me)
						dispatchEvent(new KickUserEvent(selData.userID));
				}
			}
			
			public function remoteMuteUser():void{
				if (amIModerator && usersGrid.selectedIndex != -1) {
					var selData:Object = usersGrid.selectedItem;
					
					if (selData.voiceJoined) {
						var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);
						e.userid = selData.voiceUserid;
						e.mute = !selData.voiceMuted;
						dispatchEvent(e);
					}
				}
			}
			
			public function remoteFocusUsers():void{
				focusManager.setFocus(usersGrid);
				usersGrid.drawFocus(true);
			}
			
		]]>
	</mx:Script>
	
	<mx:DataGrid id="usersGrid" dataProvider="{users}" editable="false" sortableColumns="true"
    	dragEnabled="false" width="100%" height="100%" draggableColumns="false"
    	itemRollOver="onItemRollOver(event)"
		itemRollOut="onItemRollOut(event)" 
		tabIndex="{partOptions.baseTabIndex+5}"
		accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.accessibilityName')}" >
    	<mx:columns>
    		<mx:DataGridColumn dataField="userStatus" headerText="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.statusItemRenderer')}" editable="false" width="45" minWidth="45"
    			itemRenderer="org.bigbluebutton.modules.users.views.StatusItemRenderer" sortable="false" />
    		<mx:DataGridColumn dataField="name" headerText="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.nameItemRenderer')}" editable="false" sortable="false" minWidth="60"
    			itemRenderer="org.bigbluebutton.modules.users.views.NameItemRenderer"/>
    		<mx:DataGridColumn dataField="media" headerText="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer')}" sortable="false" width="110" minWidth="110"
    			itemRenderer="org.bigbluebutton.modules.users.views.MediaItemRenderer"/>
    	</mx:columns>
    </mx:DataGrid>
	
	<mx:ControlBar width="100%">
		<mx:Button id="settingsBtn" icon="{images.users_settings}" width="30" height="30"
					toolTip="{ResourceUtil.getInstance().getString('bbb.users.settings.buttonTooltip')}" click="openSettings()" visible="true" tabIndex="{partOptions.baseTabIndex+10}"/>
		<mx:Button id="raiseHandBtn" toggle="true" icon="{images.hand_new}"
					width="30" height="30" toolTip="Raise Hand" click="raiseHand()"
					visible="false" includeInLayout="{raiseHandBtn.visible}" tabIndex="{partOptions.baseTabIndex+15}" />
		<mx:Spacer width="100%"/>
	</mx:ControlBar>
	
</mdi:MDIWindow>