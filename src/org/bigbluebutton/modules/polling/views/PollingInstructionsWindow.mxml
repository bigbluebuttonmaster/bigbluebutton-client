<?xml version="1.0" encoding="utf-8"?>

<!--
BigBlueButton open source conferencing system - http://www.bigbluebutton.org
Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
BigBlueButton is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2.1 of the License, or (at your option) any later
version.
BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
$Id: $
-->

<!--
Notes.mxml is the main view of the SharedNotes application
-->
<MDIWindow xmlns="flexlib.mdi.containers.*"
        xmlns:mx="http://www.adobe.com/2006/mxml"
width="510" height="600"
xmlns:mate="http://mate.asfusion.com/"
implements="org.bigbluebutton.common.IBbbModuleWindow"
creationComplete="onCreationComplete()"
label="Create Poll" layout="absolute"
title="{ResourceUtil.getInstance().getString('bbb.polling.createPoll')}">

<!-- Pre Defined Validation -->
	<mx:Script>
		<![CDATA[
		import flexlib.mdi.events.MDIWindowEvent;
		import org.bigbluebutton.main.views.MainCanvas;
		import mx.controls.Alert;
		import org.bigbluebutton.common.LogUtil;
		import mx.validators.Validator;
		import mx.utils.ObjectUtil;
		import mx.utils.StringUtil;
		
		import mx.collections.ArrayCollection;
		import mx.core.IUIComponent;
		import mx.containers.HBox;
		import mx.controls.CheckBox;
		import mx.controls.RadioButton;
		import org.bigbluebutton.modules.polling.events.SavePollEvent;
		import org.bigbluebutton.modules.polling.events.PublishPollEvent;
		import org.bigbluebutton.modules.polling.managers.PollingManager;
		import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent;
		import org.bigbluebutton.modules.polling.events.StartPollingEvent;
		import org.bigbluebutton.modules.polling.events.PollingStatusCheckEvent;
		import org.bigbluebutton.modules.polling.events.PollGetTitlesEvent;
		import org.bigbluebutton.modules.polling.events.GenerateWebKeyEvent;
		
		import org.bigbluebutton.modules.polling.model.PollObject;
		
		import org.bigbluebutton.core.managers.UserManager;
		import org.bigbluebutton.main.model.users.Conference 
		import org.bigbluebutton.main.model.users.BBBUser;
		import org.bigbluebutton.common.Role;
		
		import org.bigbluebutton.util.i18n.ResourceUtil;
		
		public static const LOGNAME:String = "[PollingInstructionsWindow] ";
		public var moduleAttributes:Object = new Object();
		private var userName:String;
		private var module:PollingModule;
		
		private var published:Boolean;
		
		[Bindable] public var participants:int;

		// Bindable is set to allow data to change when You hit Back and change something, this change will appear in review
		private var conference:Conference;
		[Bindable]private var _title:String;
		[Bindable]private var _question:String;
		[Bindable]private var _answers:ArrayCollection;
		[Bindable]private var _isMultiple:Boolean =false;
		[Bindable] public var _publishToWeb:Boolean;
		public var _webKey:String;
		private var _answersArray:Array;
		public var publishingAllowed:Boolean = true;
		private var manager:PollingManager = new PollingManager();
		[Bindable] public var invalidTitles:Array;
		[Bindable] public var incomingPoll:PollObject;
		[Bindable] public var editing:Boolean;
		
		// LENGTH CONSTRAINTS ( CHANGE IF YOU NEED)
		//################################################
		[Bindable]private var _MAX_QUESTION_LENGTH:uint = 200;
		[Bindable]private var _MAX_TITLE_LENGTH:uint=50;
		[Bindable]private var _MAX_ANSWER_LENGTH:uint = 100;
		[Bindable]private var _MAX_ANSWERS_AMOUNT:uint = 10;
		[Bindable]private var _ANSWER_CHARS_PER_LINE:uint=28; // made to avoid scrollbars (can be changed )
		//###############################################
		
		public function getPrefferedPosition():String{
			return MainCanvas.POPUP;
		}
		
		private function onCreationComplete():void{
			published = false;
			
			/*pollTitle.editable = false;
			focusManager.setFocus(pollTitle);
			pollTitle.editable = true;
			focusManager.setFocus(pollTitle);*/
			
			if (incomingPoll != null){
				LogUtil.debug("EDITING POLL");
				pollTitle.text = incomingPoll.title;
				pollQuestion.text = incomingPoll.question;		
				for (var i:int = 0; i < incomingPoll.answers.length; i++){
					pollAnswers.text += incomingPoll.answers[i];
					if (i < incomingPoll.answers.length-1){
						pollAnswers.text += "\n";
					}
				}  
				multiple_response.selected = incomingPoll.isMultiple;
				publishToWeb_response.selected = incomingPoll.publishToWeb;
				isMultiple();
				publishToWeb();
			}else{
				editing = false;
			}
			
			userName = moduleAttributes.username;
			
			this.module = module;
		}
		
		// Overwritting close to use custom function
		override public function close(event:MouseEvent = null):void {
			closeInstructionsWindow();
		}
		
		// function invoked when close window
		private function closeInstructionsWindow():void {
			dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.CLOSE));
		}
		
		// function invoked when checkbox is checked
		private function isMultiple():void{
			if(multiple_response.selected == true)
				_isMultiple= true;
			else
				_isMultiple= false;
		}
		
		private function publishToWeb():void{
			if(publishToWeb_response.selected == true)
				_publishToWeb= true;
			else
				_publishToWeb= false;
		}
		
		//TESTING
		private function reviewChanges():void{
			LogUtil.debug(LOGNAME + "WHAT WE HAVE:");
			LogUtil.debug(LOGNAME + "Title: "+_title);
			LogUtil.debug(LOGNAME + "Question: "+_question);
			LogUtil.debug(LOGNAME + "Answers: "+_answers);
			if(_isMultiple) LogUtil.debug(LOGNAME + "Multiple answers allowed");
		}
		// END TESTING
		
		// DATA VALIDATION
		//##################################################################################
		private function validateAndSubmit():void {
			var valid:Boolean = true;
			// Gathering Error Messages
			titleErrMsg.text = titleError();
			qErrMsg.text = questionError();
			aErrMsg.text = answerError();
			// Making Error messages Visible if there is an Error
			if (titleErrMsg.text != "VALID"){ // checking if function returned any error string
				titleErrMsg.visible=true;
				valid = false; // setting flag to false in case of error
			}else
				titleErrMsg.visible=false;
			if(qErrMsg.text != "VALID"){
				qErrMsg.visible=true;
				valid = false;
			} else
				qErrMsg.visible=false;
			if (aErrMsg.text != "VALID") {
				aErrMsg.visible=true;
				valid = false;
			}else
				aErrMsg.visible=false;
			if(valid){
				formatAndReview();
			}else{
				LogUtil.error(LOGNAME + "Error occurred in poll validation");
			}
			allowPublishing();
			publishButton.enabled = publishingAllowed;
		}
		
		// GENERATING ERROR MESSAGES
		//################################
		
		//TITLE VALIDATION
		private function titleError():String{
			var errMsg:String = "VALID";
			// If the presenter is creating a new poll, the module will not permit duplicate titles.
			// If the presenter is editing an existing poll, the module will ignore duplicate titles long enough to save it again.
			if (!editing){
				for (var i:int = 0; i < invalidTitles.length; i++){
					if (invalidTitles[i] != null){
						var checkTitle:String = invalidTitles[i];
						if (StringUtil.trim(pollTitle.text.toUpperCase()) == StringUtil.trim(checkTitle.toUpperCase())){
							errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.duplicateTitle');
						}
					}
				}
			}
			
			if (pollTitle.length == 0 ){
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.noTitle');
			}
			else if (pollTitle.length > _MAX_TITLE_LENGTH ){
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.toolongTitle')+" " +_MAX_TITLE_LENGTH;
			}
			else{	
				_title = StringUtil.trim(pollTitle.text);
			}
			
			return errMsg;
		} // _TITLE VALIDATION
		
		//QUESTION VALIDATION
		private function questionError():String{
			var errMsg:String = "VALID";
			if (pollQuestion.length == 0 )
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.noQuestion');
			else if (pollQuestion.length > _MAX_QUESTION_LENGTH )
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.toolongQuestion') + " "+ _MAX_QUESTION_LENGTH;
			else
				_question=pollQuestion.text;
			return errMsg;
		}
		
		// ANSWER VALIDATION
		private function answerError():String{
			var errMsg:String = "VALID";
			var answersArray:Array;
			var valid:Boolean=true;
			answersArray = pollAnswers.text.split("\r"); 
// splitting by '*' and new line, thus user can type '*' anywhere except the newline
			//answersArray[0] = answersArray[0].split('*').join(''); 
// As after split '*' is not displayed we need to take off from first element which is not splitted
			answersArray = makeAnswersPretty(answersArray);
			// ALL THE MESSAGES NEED TO BE LOCALISED!!!!!
			if (pollAnswers.length == 0 )
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.atLeast2Answers');
			else if (isDuplicateAnswers(answersArray))
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.answerUnique');
			else if(answersArray.length < 2)
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.eachNewLine');
			else if(answersArray.length > _MAX_ANSWERS_AMOUNT)
				errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.toomuchAnswers') +" "+_MAX_ANSWERS_AMOUNT;
			else {
				for (var i:int=0; i< answersArray.length; i++){
					if(i != 0 && (answersArray[i] == null || answersArray[i] == "")){
						answersArray.splice(i,1);
					}else if(answersArray[i].length > _MAX_ANSWER_LENGTH){
						errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.toolongAnswer') +" "+_MAX_ANSWER_LENGTH;
						valid=false;
					}
					// if last character of the array element is return (new line) or space, we it to have accurate string and than checking for duplicates again
			
					if(valid && !isDuplicateAnswers(answersArray)){
						_answers = new ArrayCollection(answersArray); // This will be displayed in Preview
						_answersArray= answersArray; // this will be sent to server
					}
				}
			}
			return errMsg;
		}
		
		//#####################################################################################################
		
		public function goBack():void{
			back.visible=false;
			publishButton.visible=false;
			options.removeAllChildren();
		}
		
		private function isDuplicateAnswers(arr:Array):Boolean{
			var x:uint;
			var y:uint;
			for (x = 0; x < arr.length ; x++){
				for (y = x + 1; y < arr.length; y++){
					if (arr[x] === arr[y]){
						return true;
					}
				}
			}
			return false;
		}
		
		//trimming return and whitespaces at the end of each array element
		private function makeAnswersPretty(arr:Array):Array{
			var i:uint;
			var trim:RegExp = /^\s+|\s+$/g;
			for (i = 0; i < arr.length; i++){
				arr[i] = arr[i].replace(trim, "");
				if(!arr[i]) //if user puts just return or space and return - this array elements will be deleted
					arr.splice(i,1);
				}
			return arr;
		}
		
		private function formatAndReview():void{
			// Change maind window and buttons to Review
			mainArea.selectedChild=review;
			buttons.selectedChild=reviewButtons;
			//REFRESHING CANVAS
			invalidateDisplayList();
			validateNow();
			// Make Back button visible
			back.visible=true;
			publishButton.visible=true;
			checkInstructions.visible = _isMultiple;
			// Make Title and Question string first letter Upper case
			_title = upperFirstLetter(_title);
			_question = upperFirstLetter(_question);
			createButtons(_answers.length,_answers);
			focusManager.setFocus(back);
		}
		
		private function upperFirstLetter(str:String) : String {
			return str.substr(0, 1).toUpperCase() + str.substr(1, str.length);
		}

		// function receives Array.length and ArrayCollectionvar p:BBBUser;
		private function createButtons(amount:uint, content:ArrayCollection):void{
			var _cb:CheckBox;
			var _rb:RadioButton;
			var _tx: Text;
			var _hb: HBox;
			// creating buttons one by one
			for (var i:int = 0; i < amount; i++) {
				_tx = new Text();
				_hb = new HBox();
				_tx.name = "option" +i;
				_tx.width = 200;
				// assigning array element to text field
				_tx.text =content.getItemAt(i).toString();
				options.addChild(_hb);
				// if global var _isMultiple is true it means user wants checkboxes,
				//otherwise radiobutton (if multiple choices are allowed)
				if(_isMultiple){
					_cb= new CheckBox();
					// giving button a name of array elelment to process it easier later
					_cb.name=content.getItemAt(i).toString();
					// gap between the buttons
					_cb.y=i*20;
					// adding buttons to the Horizontal Box
					_hb.addChild(_cb);
				}else{
					_rb = new RadioButton();
					_rb.name = content.getItemAt(i).toString(); // giving button a name of array elelment to process it easier later
					_rb.groupName = "answers";
					_rb.label =" ";
					_hb.addChild(_rb);
				}
			_hb.addChild(_tx); // adding text near button
			} // end of loop
		} // end of function
		
		private function buildPoll():PollObject{
			var builtPoll:PollObject = new PollObject();
			builtPoll.title = _title;
			builtPoll.isMultiple = _isMultiple;
			builtPoll.question = _question;
			builtPoll.answers = _answersArray;
			builtPoll.didNotVote = participants;
			builtPoll.publishToWeb = _publishToWeb;
			if (_publishToWeb && _webKey != null)
				builtPoll.webKey = _webKey;
			return builtPoll;
		}
		
		private function savePoll(callingFromPublish:Boolean = false):void {
			participants = 0;
			var p:BBBUser;
			conference = UserManager.getInstance().getConference();
			for (var i:int = 0; i < conference.users.length; i++) {
				p = conference.users.getItemAt(i) as BBBUser;
				if (p.role != Role.MODERATOR) {
					participants++;
				}
			} 
			
			var savePollEvent: SavePollEvent = new SavePollEvent(SavePollEvent.SAVE);
			savePollEvent.poll = buildPoll();
			savePollEvent.poll.status = !callingFromPublish;
			
			dispatchEvent(savePollEvent);
			if(!callingFromPublish)
				closeInstructionsWindow();
		}
		
		private function publish():void {
			published = true;
			savePoll(true);
			
			var publishPollEvent: PublishPollEvent = new PublishPollEvent(PublishPollEvent.PUBLISH);
			publishPollEvent.poll = buildPoll();
			publishPollEvent.poll.webKey = _webKey;
			dispatchEvent(publishPollEvent);
			
			dispatchEvent(new StartPollingEvent(StartPollingEvent.START));
			closeInstructionsWindow();
		}
		
		private function allowPublishing():void {
			dispatchEvent(new PollingStatusCheckEvent(PollingStatusCheckEvent.CHECK));
		}
		]]>
	</mx:Script>
	
    <mx:ViewStack id="mainArea" width="100%">
    <!-- ################### MAIN AREA ##############-->
    <!-- Instructions Window with Form-->
	    <mx:Canvas id="instrMain" width="90%" height="90%" focusEnabled="true">
        	<mx:VBox width="90%" height="90%" focusEnabled="true">
           		<mx:Form width="100%" id="instructionsForm" paddingTop="30" paddingBottom="10" paddingLeft="30" focusEnabled="true">
					<mx:FormItem fontWeight="bold" 
								 label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.title')}" 
								 paddingLeft="35" 
								 id="titleFormItem"
								 focusEnabled="true">
						<mx:TextInput id="pollTitle" focusEnabled="true" accessibilityDescription="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.title')}"/>
						<mx:Label id="titleErrMsg" 
								  text="" 
								  visible="false" 
								  width="100%" 
								  color="red" 
								  fontSize="9" 
								  fontWeight="normal"/>
   					</mx:FormItem>

					<mx:FormItem fontWeight="bold" 
								 label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.question')}" 
								 paddingLeft="35" 
								 paddingTop="20" >
						<mx:TextArea id="pollQuestion" 
									 width="200" 
									 height="100" 
									 accessibilityDescription="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.question')}"/>
						<mx:Label id="qErrMsg" 
								  text="" 
								  visible="false" 
								  width="100%" 
								  color="red" 
								  fontSize="9" 
								  fontWeight="normal" />
					</mx:FormItem>

					<mx:FormItem fontWeight="bold" 
								 label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.answers')}" 
								 paddingLeft="35" 
								 paddingTop="30" >
						<mx:TextArea id="pollAnswers" 
									 width="200" 
									 height="100" 
									 accessibilityDescription="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.answers')}"/>
						<mx:Label id="answerHint" 
								  text="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.hint')}" 
								  visible="true" 
								  width="100%" 
								  fontSize="9" 
								  fontWeight="normal" />
					</mx:FormItem>

					<mx:FormItem fontWeight="bold" 
								 paddingLeft="20" 
								 paddingTop="5" >
						<mx:Label id="aErrMsg" 
								  text="" 
								  visible="false" 
								  width="100%" 
								  color="red" 
								  fontSize="9" 
								  fontWeight="normal" />
					</mx:FormItem>

					<mx:FormItem paddingLeft="10" 
								 paddingTop="5" >
						<mx:CheckBox id="multiple_response" 
									 label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.moreThanOneResponse')}" 
									 click="isMultiple()" />
						<mx:CheckBox id="publishToWeb_response" 
									 label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.publishToWeb')}" 
									 click="publishToWeb()" />
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:Canvas>

		<!-- Review Window that is invoked when Next button is clicked -->
		<mx:Canvas id="review">
			<mx:VBox width="90%" height="90%" paddingLeft="40">
           		<mx:Label text="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.hereIsYourPoll')}" 
           				  fontSize="11" 
           				  fontWeight="bold" 
	           			  width ="100%" 
    	       			  paddingTop="30" 
        	   			  paddingLeft="20" 
           				  paddingBottom="5"/>
           		<mx:Label text="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.pollWillPublishOnline')}" 
           				  fontSize="11" 
           				  fontWeight="bold" 
	           			  width ="100%" 
    	       			  color="red" 
        	   			  paddingTop="10" 
           				  paddingLeft="20" 
           				  paddingBottom="15" 
           				  visible="{_publishToWeb}"/>
	           	<mx:Panel id="titleShow" 
	           			  title="{_title}" 
	           			  width="90%" >
					<mx:VBox paddingLeft="40" 
							 paddingBottom="40">
           				<mx:Text text="{_question}" 
           					 fontSize="10" 
           					 fontWeight="bold" 
	           				 paddingBottom="5" 
    	       				 paddingTop="20" 
        	   				 width="{_MAX_QUESTION_LENGTH}"/>
           				<mx:Text id="checkInstructions" 
           						 text="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.checkAll')}"/>
                		<mx:Box id="options" />   
           			</mx:VBox>
           		</mx:Panel>
                <mx:Label text=" {ResourceUtil.getInstance().getString('bbb.polling.pollPreview.ifYouWantChanges')}"
          	 			  fontSize="11"
           				  fontWeight="normal" 
           				  width ="100%"
           				  paddingLeft="20" 
           			 	  paddingBottom="20" 
	           			  paddingTop="20"/>
			</mx:VBox>
		</mx:Canvas>
	</mx:ViewStack>

	<!-- ###################BUTTONS##############-->
	<!-- area where buttons are located -->
	<mx:ControlBar>
		<!-- Back Button is not visible while instructions and visible while preView -->
		<mx:Button id="back" 
				   label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.modify')}" 
				   click="{mainArea.selectedChild=instrMain} {buttons.selectedChild=instrButtons} goBack()" 
				   width="100" 
				   height="30" 
				   visible="false"/>
		<mx:Button id="publishButton"
				   label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.publish')}"
				   click="publish();"
				   width="100"
				   height="30"
				   visible="false"/>
		<mx:ViewStack id="buttons">
			<!--buttons that appear when Instructions is displayed -->
			<mx:Canvas id="instrButtons">
				<mx:Button id="next" 
						   label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.preview')}" 
						   click="validateAndSubmit()" 
						   width="100" 
						   height="30"/>
			</mx:Canvas>
			<!-- buttons that appear on Review -->
			<mx:Canvas id="reviewButtons">
				<mx:Button id="SavePoll"
						   label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.save')}" 
						   click="savePoll()" 
						   width="100" 
						   height="30"/>
			</mx:Canvas>
		</mx:ViewStack>
		<!-- Cancel button appear everywhere -->
		<mx:Button id="Cancel" 
				   label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.cancel')}" 
				   click="closeInstructionsWindow()" 
				   width="100" 
				   height="30"/>
	</mx:ControlBar>
</MDIWindow>
