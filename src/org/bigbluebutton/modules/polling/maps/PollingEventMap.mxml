<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">

	<mx:Script>
		<![CDATA[

			import mx.events.FlexEvent;		
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.events.BBBEvent;
			
			import org.bigbluebutton.modules.polling.managers.PollingManager;
			
			import org.bigbluebutton.modules.polling.events.*;
			
				]]>
				
	</mx:Script>

	<EventHandlers type="{FlexEvent.PREINITIALIZE}">
		<ObjectBuilder generator="{PollingManager}"/>		
	</EventHandlers>	
	
	<!-- Module Events -->
	<EventHandlers type="{ModuleEvent.START}">
		<MethodInvoker generator="{PollingManager}" method="handleStartModuleEvent" arguments="{event.module}"/>
	</EventHandlers>	
	
	<EventHandlers type="{ModuleEvent.STOP}">
	</EventHandlers>	
		
    <!-- PollingInstructionsWindow Events -->
	 <EventHandlers type="{PollingInstructionsWindowEvent.OPEN}">
		<MethodInvoker generator="{PollingManager}"   method="handleOpenPollingInstructionsWindowEvent" arguments="{event}" />
	 </EventHandlers>
	  
	  <EventHandlers type="{PollingInstructionsWindowEvent.CLOSE}">
		<MethodInvoker generator="{PollingManager}" method="handleClosePollingInstructionsWindowEvent"  arguments="{event}"/>
	 </EventHandlers>
		
	<!-- PollingViewWindow Events -->
	<EventHandlers type="{PollingViewWindowEvent.OPEN}">
		<MethodInvoker generator="{PollingManager}"  method="handleOpenPollingViewWindow" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{PollingViewWindowEvent.CLOSE}">
		<MethodInvoker generator="{PollingManager}"  method="handleClosePollingViewWindow" arguments="{event}"/>
	 </EventHandlers>
	
	 <!-- Start Polling Event - Sharing Polling View Window -->	  
	 <EventHandlers type="{StartPollingEvent.START}">
		<MethodInvoker generator="{PollingManager}"  method="handleStartPollingEvent" arguments="{event}"/>
	 </EventHandlers>
	 
	  <!-- Events on the switch between Presenter and Viewer -->
	 <EventHandlers type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}">
			<MethodInvoker generator="{PollingManager}" method="handleMadePresenterEvent" arguments="{event}"/>
  	   </EventHandlers>
	
	<EventHandlers type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}">
		<MethodInvoker generator="{PollingManager}" method="handleMadeViewerEvent" arguments="{event}"/>
	</EventHandlers>	
	
	<!-- Event to save Poll to db -->
	 <EventHandlers type="{SavePollEvent.SAVE}">
		<MethodInvoker generator="{PollingManager}" method="handleSavePollEvent" arguments="{event}"/>
	</EventHandlers>
	
	 <EventHandlers type="{PublishPollEvent.PUBLISH}">
		<MethodInvoker generator="{PollingManager}" method="handlePublishPollEvent" arguments="{event}"/>
	</EventHandlers>
	
	 <EventHandlers type="{PublishPollEvent.REPOST}">
		<MethodInvoker generator="{PollingManager}" method="handleRepostPollEvent" arguments="{event}"/>
	</EventHandlers>
	
	<EventHandlers type="{VoteEvent.START}">
		<MethodInvoker generator="{PollingManager}" method="handleVoteEvent" arguments="{event}"/>
	</EventHandlers>	

	<!-- PollingStatsWindow Events -->
	<EventHandlers type="{PollingStatsWindowEvent.OPEN}">
		<MethodInvoker generator="{PollingManager}"  method="handleOpenPollingStatsWindow" arguments="{event}"/>
	 </EventHandlers>
	 
	<EventHandlers type="{PollingStatsWindowEvent.CLOSE}">
		<MethodInvoker generator="{PollingManager}"  method="handleClosePollingStatsWindow" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{PollRefreshEvent.REFRESH}">
		<MethodInvoker generator="{PollingManager}"  method="handleRefreshPollingStatsWindow" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{PollRefreshEvent.GET}">
		<MethodInvoker generator="{PollingManager}"  method="handleGetPollingStats" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{StopPollEvent.STOP_POLL}">
		<MethodInvoker generator="{PollingManager}"  method="handleStopPolling" arguments="{event}"/>
	 </EventHandlers>
	 
	 <!-- Event to check if a poll is already open before allowing presenter to publish a second poll -->
	 <EventHandlers type="{PollingStatusCheckEvent.CHECK}">
		<MethodInvoker generator="{PollingManager}"  method="handleCheckStatusEvent" arguments="{event}"/>
	 </EventHandlers>
	 
	 <!-- Events to update the list of poll titles and statuses to display in the Polling Menu -->
	 <EventHandlers type="{PollGetTitlesEvent.INIT}">
		<MethodInvoker generator="{PollingManager}"  method="handleInitializePollMenuEvent" arguments="{event}"/>
	 </EventHandlers>
	 <EventHandlers type="{PollGetTitlesEvent.UPDATE}">
		<MethodInvoker generator="{PollingManager}"  method="handleUpdateTitlesEvent" arguments="{event}"/>
	 </EventHandlers>

	 <EventHandlers type="{PollReturnTitlesEvent.UPDATE}">
		<MethodInvoker generator="{PollingManager}"  method="handleReturnTitlesEvent" arguments="{event}"/>
	 </EventHandlers>

	 
	 <EventHandlers type="{PollGetPollEvent.INIT}">
		<MethodInvoker generator="{PollingManager}"  method="handlePopulateMenuEvent" arguments="{event}"/>
	 </EventHandlers>

	 <EventHandlers type="{PollGetPollEvent.RETURN}">
		<MethodInvoker generator="{PollingManager}"  method="handleReturnPollEvent" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{PollGetTitlesEvent.CHECK}">
		<MethodInvoker generator="{PollingManager}"  method="handleCheckTitlesEvent" arguments="{event}"/>
	 </EventHandlers>
	 <EventHandlers type="{PollGetTitlesEvent.RETURN}">
		<MethodInvoker generator="{PollingManager}"  method="handleCheckTitlesEvent" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{OpenSavedPollEvent.OPEN}">
		<MethodInvoker generator="{PollingManager}"  method="handleOpenSavedPollEvent" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{ReviewResultsEvent.REVIEW}">
		<MethodInvoker generator="{PollingManager}"  method="handleReviewResultsEvent" arguments="{event}"/>
	 </EventHandlers>
	 
	 <EventHandlers type="{GenerateWebKeyEvent.GENERATE}">
		<MethodInvoker generator="{PollingManager}"  method="handleGenerateWebKeyEvent" arguments="{event}"/>
	 </EventHandlers>
	 <EventHandlers type="{GenerateWebKeyEvent.RETURN}">
		<MethodInvoker generator="{PollingManager}"  method="handleReturnWebKeyEvent" arguments="{event}"/>
	 </EventHandlers>
</EventMap>
