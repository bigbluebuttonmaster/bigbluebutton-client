<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:ApplicationControlBar xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/" visible="{showToolbar}"
	enabled="true" xmlns:views="org.bigbluebutton.main.views.*"
	initialize="init()" >   
	
	<mate:Listener type="{ToolbarButtonEvent.ADD}" method="handleAddToolbarButtonEvent" />	
	<mate:Listener type="{ToolbarButtonEvent.REMOVE}" method="handleRemoveToolbarButtonEvent"/>
	<mate:Listener type="{BBBEvent.END_MEETING_EVENT}" method="handleEndMeetingEvent"/>
	<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="hideToolbar" />
	<mate:Listener type="{ConfigEvent.CONFIG_EVENT}" method="gotConfigParameters" />
	<mate:Listener type="{SettingsEvent.SETTINGS_MODULE_LOADED}" method="showSettingsButton" />
	<mate:Listener type="{ShortcutEvent.REMOTE_OPEN_SHORTCUT_WIN}" method="remoteShortcutClick" />
	<mate:Listener type="{ShortcutEvent.LOGOUT}" method="remoteLogout" />
	
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;		
			import mx.core.UIComponent;
			import org.bigbluebutton.common.IBbbToolbarComponent;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import org.bigbluebutton.common.events.OpenWindowEvent;
			import org.bigbluebutton.common.events.ToolbarButtonEvent;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.ConfigEvent;
			import org.bigbluebutton.main.events.LogoutEvent;
			import org.bigbluebutton.main.events.SettingsEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.main.events.SuccessfulLoginEvent;
			import org.bigbluebutton.main.model.LayoutOptions;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.core.services.BandwidthMonitor;


			private var DEFAULT_HELP_URL:String = "http://www.bigbluebutton.org/content/videos";
			
			public static const ALIGN_RIGHT:String ="ALIGN_RIGHT";
			public static const ALIGN_LEFT:String = "ALIGN_LEFT";
			
			[Bindable]
			private var showHelpBtn:Boolean = false;
			[Bindable]
			private var showToolbar:Boolean = false;
			[Bindable]
			public var toolbarOptions:LayoutOptions = new LayoutOptions();
			
			[Bindable]
			private var baseIndex:int;
			[Bindable]
			private var numButtons:int;
			/*
			 * Because of the de-centralized way buttons are added to the toolbar, there is a large gap between the tab indexes of the main buttons
			 * on the left and the tab indexes of the "other" items on the right (shortcut glossary, language slector, etc). This will make it more
			 * convenient to add future items to the tab order.
			 * 
			 * - Justin Robinson, November 13 2012 
			 */
			
			private var xml:XML;
						
			private function init():void{
				baseIndex = 1;
				numButtons = 0;
			}
			
								
			public function displayToolbar():void{
				toolbarOptions = new LayoutOptions();
				toolbarOptions.parseOptions();	
				if (toolbarOptions.showToolbar) {
					showToolbar = true;
				} else {
					showToolbar = false;
				}
				
				if (toolbarOptions.showHelpButton) {
					showHelpBtn = true;
				} else {
					showHelpBtn = false;
				}
			}
			
			public function addButton(name:String):Button{
				var btn:Button = new Button();
				btn.id = name;
				btn.label = name;
				btn.height = 20;
				btn.visible = true;
				this.addChild(btn);
				
				return btn;
			}
			
			private function onHelpButtonClicked():void {
				navigateToURL(new URLRequest(DEFAULT_HELP_URL))
			}
			
			private function handleEndMeetingEvent(event:BBBEvent):void {
				LogUtil.debug("Received end meeting event.");
				doLogout();
			}
			
			private function doLogout():void {
				dispatchEvent(new LogoutEvent(LogoutEvent.USER_LOGGED_OUT));
			}
			
			private function hideToolbar(e:ConnectionFailedEvent):void{
				if (toolbarOptions.showToolbar) {
					this.visible = false;
				} else {
					this.visible = true;
				}
			}
			
			private function handleAddToolbarButtonEvent(event:ToolbarButtonEvent):void {
				// Find out how to import accessibility into custom components; even though the ToolbarButtons are buttons, they don't seem to have a tabIndex
				if (event.location == ToolbarButtonEvent.TOP_TOOLBAR) {
					var index:int;
					var added:int = 0;
					//*var localButton:UIComponent;
					if (event.module == "DeskShare"){
						index = 0;
					}
					else if (event.module == "Microphone"){
						index = 1;
					}
					else if (event.module == "Webcam"){
						index = 2;
					}
					
					//localButton = event.button as UIComponent;
					//(localButton as Button).tabIndex = baseIndex + numButtons;
					//addedBtns.addChild(localButton);*/
					
					
					addedBtns.addChild(event.button as UIComponent);
					// Won't work quite like this: addedBtns.addChildAt(event.button as UIComponent, index);					
					numButtons++;
					realignButtons();
				}
			}
			
			private function handleRemoveToolbarButtonEvent(event:ToolbarButtonEvent):void {
				if (addedBtns.contains(event.button as UIComponent))
					addedBtns.removeChild(event.button as UIComponent);
			}
			
			private function realignButtons():void{
				for each (var button:UIComponent in addedBtns.getChildren()){
					var toolbarComponent:IBbbToolbarComponent = button as IBbbToolbarComponent;
					
					
					/*if (toolbarComponent.getAlignment() == ALIGN_LEFT){ 
						addedBtns.setChildIndex(button, 0);
						//(addedBtns.getChildAt(0) as Button).tabIndex = 0;
					}
					else if (toolbarComponent.getAlignment() == ALIGN_RIGHT){ 
						addedBtns.setChildIndex(button, addedBtns.numChildren - 1);
						//(addedBtns.getChildAt(0) as Button).tabIndex = addedBtns.numChildren - 1;
					}*/
					button.tabIndex = baseIndex;
					//for (var i:int = 0; i < addedBtns.numChildren; i++){
					//	(addedBtns.getChildAt(i) as Button).tabIndex = baseIndex + i;
					//}
				}
			}
						
			private function gotConfigParameters(e:ConfigEvent):void{
				langSelector.visible = e.config.languageEnabled;
				shortcutKeysBtn.includeInLayout = shortcutKeysBtn.visible = e.config.shortcutKeysShowButton; 
				DEFAULT_HELP_URL = e.config.helpURL;
			}
			
			private function onDisconnectTest():void{
				var d:Dispatcher = new Dispatcher();
				var e:LogoutEvent = new LogoutEvent(LogoutEvent.DISCONNECT_TEST);
				d.dispatchEvent(e);
			}
			
			private function showSettingsButton(e:SettingsEvent):void{
				var b:Button = new Button();
				b.label = ResourceUtil.getInstance().getString('bbb.mainToolbar.settingsBtn');
				b.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.settingsBtn.toolTip');
				b.addEventListener(MouseEvent.CLICK, openSettings);
				this.addChild(b);
			}
			
			private function openSettings(e:Event = null):void{
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new SettingsEvent(SettingsEvent.OPEN_SETTINGS_PANEL));
			}
			
			public function remoteShortcutClick(e:ShortcutEvent):void{
				onShortcutButtonClick();
			}
			
			public function remoteLogout(e:ShortcutEvent):void{
				doLogout();
			}
			
			private function onShortcutButtonClick(e:Event = null):void {
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new ShortcutEvent(ShortcutEvent.OPEN_SHORTCUT_WIN));
			}

		]]>
	</mx:Script>	
	<mx:HBox id="addedBtns"/>
	<mx:VRule strokeWidth="2" height="100%" visible="{muteMeBtn.visible}"/>
	<views:MuteMeButton id="muteMeBtn"  height="20" />
	<mx:Spacer width="100%"/>
	<views:LanguageSelector id="langSelector" 
							visible="false" 
							tabIndex="{baseIndex+numButtons+5}"
							accessibilityName="{ResourceUtil.getInstance().getString('bbb.mainToolbar.langSelector')}"/>
<!--
  <mx:Button label="DISCONNECT!" click="BBB.initConnectionManager().forceClose()" height="22" toolTip="Click to simulate disconnection" />
-->
	<mx:Button id="shortcutKeysBtn" label="{ResourceUtil.getInstance().getString('bbb.mainToolbar.shortcutBtn')}" styleName="shortcutButtonStyle"
             click="onShortcutButtonClick()" height="22" 
             toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.shortcutBtn.toolTip')}" 
             tabIndex="{baseIndex+numButtons+6}" />
	<mx:LinkButton id="helpBtn" visible="{showHelpBtn}" label="?" click="onHelpButtonClicked()" height="22" 
                   styleName="helpLinkButtonStyle" tabIndex="{baseIndex+numButtons+7}" 
                   toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}"/>
	<mx:Button label="" id="btnLogout" styleName="logoutButtonStyle"
                 toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.logoutBtn.toolTip')}" right="10" click="doLogout()" height="22"
                 tabIndex="{baseIndex+numButtons+8}" />
</mx:ApplicationControlBar>
