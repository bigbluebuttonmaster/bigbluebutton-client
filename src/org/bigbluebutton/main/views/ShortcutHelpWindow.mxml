<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<MDIWindow xmlns="flexlib.mdi.containers.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       showCloseButton="true"
		   initialize="init()"
	       creationComplete="onCreationComplete()"
		   xmlns:mate="http://mate.asfusion.com/" 
		   title="{ResourceUtil.getInstance().getString('bbb.shortcuthelp.title')}" >
		   
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
	
	<mx:Script>
		<![CDATA[
			import flash.events.Event;
			
			import flexlib.controls.textClasses.StringBoundaries;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.events.ShortcutEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var genKeys:ArrayList;
			private var presKeys:ArrayList;
			private var chatKeys:ArrayList;
			private var userKeys:ArrayList;
			
			private var genResource:Array = ['bbb.shortcutkey.general.minimize', 'bbb.shortcutkey.general.maximize', 'bbb.shortcutkey.flash.exit', 
											 'bbb.shortcutkey.focus.users', 'bbb.shortcutkey.focus.video', 'bbb.shortcutkey.focus.presentation',  
											 'bbb.shortcutkey.focus.chat', 'bbb.shortcutkey.chat.chatinput', 'bbb.shortcutkey.share.desktop', 
											 'bbb.shortcutkey.share.microphone', 'bbb.shortcutkey.share.webcam', 'bbb.shortcutkey.shortcutWindow', 
											 'bbb.shortcutkey.logout', 'bbb.shortcutkey.raiseHand', 'bbb.shortcutkey.users.muteme'];
											 
			private var presResource:Array = ['bbb.shortcutkey.present.focusslide', 'bbb.shortcutkey.whiteboard.undo', 'bbb.shortcutkey.present.upload',  
											  'bbb.shortcutkey.present.previous', 'bbb.shortcutkey.present.select', 'bbb.shortcutkey.present.next', 	
											  'bbb.shortcutkey.present.fitWidth', 'bbb.shortcutkey.present.fitPage'];
			
			private var chatResource:Array = ['bbb.shortcutkey.chat.focusTabs', 'bbb.shortcutkey.chat.focusBox', 'bbb.shortcutkey.chat.changeColour', 
											  'bbb.shortcutkey.chat.sendMessage', 'bbb.shortcutkey.chat.explanation', 'bbb.shortcutkey.chat.chatbox.gofirst',  
											  'bbb.shortcutkey.chat.chatbox.goback', 'bbb.shortcutkey.chat.chatbox.repeat', 'bbb.shortcutkey.chat.chatbox.advance', 
											  'bbb.shortcutkey.chat.chatbox.golatest',  'bbb.shortcutkey.chat.chatbox.goread'];
			
			private var userResource:Array = ['bbb.shortcutkey.users.focusUsers', 'bbb.shortcutkey.users.makePresenter', 'bbb.shortcutkey.users.mute', 
											  'bbb.shortcutkey.users.kick', 'bbb.shortcutkey.users.muteall'];
			
			[Bindable]
			private var shownKeys:ArrayCollection;
			
			[Bindable]
			private var baseIndex:int = 100;
			
			private var modifier:String;
			private var globalModifier:String;
			
			private function init():void {
				modifier = ExternalInterface.call("determineModifier");
				globalModifier = ExternalInterface.call("determineGlobalModifier");
			}
			
			private function onCreationComplete():void {
				localeChanged();
				
				titleBarOverlay.tabIndex = baseIndex;
				
				minimizeBtn.tabIndex = baseIndex + 1;
				maximizeRestoreBtn.tabIndex = baseIndex + 2;
				closeBtn.tabIndex = baseIndex + 3;
			}
			
			private function reloadKeys():void {
				genKeys = loadKeys(genResource, true);
				presKeys = loadKeys(presResource);
				chatKeys = loadKeys(chatResource);
				userKeys = loadKeys(userResource);
				
				changeArray();
			}
			
			private function changeArray():void {
				shownKeys = new ArrayCollection();
				switch(categories.selectedIndex) {
				case 0: //General
					shownKeys.addAll(genKeys);
					break;
				case 1: //Presentation
					shownKeys.addAll(presKeys);
					break;
				case 2: //Chat
					shownKeys.addAll(chatKeys);
					break;
				case 3: //Users
					shownKeys.addAll(userKeys);
					break;
				}
			}
			
			private function loadKeys(resource:Array, global:Boolean=false):ArrayList {
				var keyList:ArrayList = new ArrayList();
				var keyCombo:String;
				var mod:String;
				
				if (global)
					mod = globalModifier;
				else
					mod = modifier;
				
				for (var i:int = 0; i < resource.length; i++) {
					keyCombo = ResourceUtil.getInstance().getString(resource[i]);
					var key:int = int(keyCombo);
					var convKey:String;
					
					// Special cases where the keycodes don't render a sensible character
					switch (key) {
						case 32 :
							convKey = "Space";
						  	break;
						case 189 :
						  	convKey = "Minus";
						  	break;
						case 187 :
						  	convKey = "Plus";
						  	break;
						default:
							convKey = String.fromCharCode(key);
							break;
					}
					
					if (keyCombo == "----"){
						keyList.addItem({shortcut:(ResourceUtil.getInstance().getString(resource[i] + '.function')), func:""});
					} else{
						keyList.addItem({shortcut:mod + convKey, func:(ResourceUtil.getInstance().getString(resource[i] + '.function'))});
					}
				}
				return keyList;
			}
			
			private function localeChanged(e:LocaleChangeEvent = null):void{
				reloadKeys();
				resourcesChanged();
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();				
				
				this.title = ResourceUtil.getInstance().getString('bbb.shortcuthelp.title');
				
				if (titleBarOverlay != null) {
					titleBarOverlay.accessibilityName = ResourceUtil.getInstance().getString('bbb.shortcuthelp.titleBar');
				}
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.shortcuthelp.minimizeBtn.accessibilityName");
					
					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.shortcuthelp.maximizeRestoreBtn.accessibilityName");
					
					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.shortcuthelp.closeBtn.accessibilityName");
				}
			}
			
			public function focusCategories():void { //actually focuses the datagrid instead
				focusManager.setFocus(keyList);
				keyList.drawFocus(true);
			}
		]]>
	</mx:Script>
	
	<mx:ComboBox id="categories" labelField="Please select an area for which to view shortcut keys: " 
				 editable="false" 
				 change="changeArray()"
				 tabIndex="{baseIndex + 10}">
		<mx:ArrayCollection>
        	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.general")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.presentation")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.chat")}</mx:String>
         	<mx:String>{ResourceUtil.getInstance().getString("bbb.shortcuthelp.dropdown.users")}</mx:String>
      	</mx:ArrayCollection>
	</mx:ComboBox>
	<mx:DataGrid id="keyList" draggableColumns="false" dataProvider="{shownKeys}" width="100%" height="100%" tabIndex="{baseIndex + 15}" >
		<mx:columns>
			<mx:DataGridColumn dataField="shortcut" />
			<mx:DataGridColumn dataField="func" />
		</mx:columns>
	</mx:DataGrid>
</MDIWindow>